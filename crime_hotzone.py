import pandas as pd
import folium
import warnings
import openpyxl
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderServiceError
from geopy.distance import geodesic
import random

# 경고 메시지 무시 설정
warnings.filterwarnings('ignore')

# 1. 파일 경로 설정
path_by_place = '경찰청_범죄 발생 장소별 통계_20231231.csv'
path_by_region = '경찰청_범죄 발생 지역별 통계_20231231 (1).csv'
path_crime_points = '범죄주의구간_전체_9658건.xlsx'

# 모든 데이터프레임 변수를 미리 None으로 초기화
df_by_place = None
df_by_region = None
df_crime_points = None

# 여러 인코딩을 순차적으로 시도하는 CSV 로딩 함수
def read_csv_with_encoding_fallback(filepath):
    encodings_to_try = ['euc-kr', 'cp949', 'utf-8']
    for encoding in encodings_to_try:
        try:
            print(f"  > '{filepath}' 파일을 '{encoding}' 인코딩으로 CSV 로드 시도 중...")
            df = pd.read_csv(filepath, encoding=encoding, engine='python')
            print(f"  > '{filepath}' 파일 로딩 성공! (인코딩: {encoding})")
            return df
        except UnicodeDecodeError:
            continue
        except pd.errors.ParserError:
            print(f"  > '{filepath}' 파일 파싱 실패. 다음 인코딩으로 시도.")
            continue
        except Exception as e:
            print(f"  > '{filepath}' 파일 로딩 중 예상치 못한 오류 발생: {e}")
            return None
    
    print(f"  > 모든 CSV 인코딩 시도 실패: '{filepath}' 파일을 읽을 수 없습니다.")
    return None

# 2. 데이터 불러오기
print("파일 로딩 시작...")

df_by_place = read_csv_with_encoding_fallback(path_by_place)
df_by_region = read_csv_with_encoding_fallback(path_by_region)

print("\n'범죄주의구간' 파일 로딩 시도...")
try:
    print(f"  > '{path_crime_points}' 파일을 엑셀(.xlsx)로 로드 시도 중...")
    df_crime_points = pd.read_excel(path_crime_points, engine='openpyxl')
    print(f"  > '{path_crime_points}' 파일 엑셀 로딩 성공!")
except Exception:
    print(f"  > '{path_crime_points}' 파일 엑셀 로딩 실패. CSV로 다시 시도합니다.")
    df_crime_points = read_csv_with_encoding_fallback(path_crime_points)

# **여기에 CTPRVN_CD 필터링 로직 추가**
if df_crime_points is not None:
    ctprvn_cd_list = [11, 26, 27, 28, 29, 30, 31, 36, 41, 42, 43, 44, 45, 46, 47, 48, 50]
    
    # 필터링 적용 전에 SGG_CD가 숫자인지 확인하고 int로 변환
    df_crime_points['SGG_CD'] = pd.to_numeric(df_crime_points['SGG_CD'], errors='coerce').astype('Int64')
    df_crime_points['CTPRVN_CD'] = df_crime_points['SGG_CD'].apply(lambda x: x // 1000 if pd.notna(x) else None)
    
    initial_count = len(df_crime_points)
    df_crime_points = df_crime_points[df_crime_points['CTPRVN_CD'].isin(ctprvn_cd_list)]
    final_count = len(df_crime_points)

    print(f"\n[데이터 전처리] CTPRVN_CD 필터링 적용:")
    print(f"  > 초기 데이터 수: {initial_count}개")
    print(f"  > 필터링 후 데이터 수: {final_count}개")
    
    print("\n범죄주의구간 데이터 (일부):")
    print(df_crime_points.head())

# 3. 핫스팟 데이터 전처리 (확장된 시군구 좌표)
sgg_coords = {
    # 서울
    '11110': [37.5735, 126.9790], '11140': [37.5638, 126.9975], '11170': [37.5323, 126.9902],
    '11200': [37.5632, 127.0369], '11215': [37.5492, 127.0858], '11230': [37.5804, 127.0543],
    '11260': [37.5976, 127.0945], '11290': [37.6065, 127.0270], '11305': [37.6398, 127.0256],
    '11320': [37.6687, 127.0471], '11350': [37.6548, 127.0560], '11380': [37.6027, 126.9298],
    '11410': [37.5794, 126.9366], '11440': [37.5662, 126.9016], '11470': [37.5271, 126.8569],
    '11500': [37.5501, 126.8495], '11530': [37.4955, 126.8581], '11545': [37.4571, 126.8953],
    '11560': [37.5262, 126.9140], '11590': [37.5124, 126.9392], '11620': [37.4781, 126.9517],
    '11650': [37.4839, 127.0326], '11680': [37.5173, 127.0475], '11710': [37.5145, 127.1059],
    '11740': [37.5297, 127.1257],
    # 부산
    '26000': [35.1795, 129.0756], '26110': [35.1017, 129.0260], '26140': [35.0970, 129.0324],
    '26170': [35.1278, 129.0734], '26200': [35.1524, 129.1172], '26230': [35.1950, 129.0060],
    '26260': [35.2158, 129.0811], '26290': [35.1540, 128.9890], '26320': [35.2530, 129.0230],
    '26350': [35.1610, 129.0530], '26380': [35.2076, 129.1309], '26410': [35.2346, 129.0831],
    '26440': [35.1780, 129.0076], '26470': [35.1664, 129.1158], '26500': [35.1852, 129.0967],
    '26530': [35.2058, 128.9840], '26710': [35.2470, 129.1830],
    # 대구
    '27000': [35.8714, 128.6014], '27110': [35.8671, 128.5901], '27140': [35.8824, 128.6416],
    '27170': [35.8719, 128.5636], '27200': [35.8452, 128.5835], '27230': [35.8941, 128.6186],
    '27260': [35.8569, 128.6360], '27290': [35.8340, 128.5303], '27710': [35.8450, 128.4630],
    '27720': [36.2625, 128.5442],
    # 인천
    '28000': [37.4563, 126.7052], '28110': [37.4727, 126.6200], '28170': [37.4497, 126.6570],
    '28185': [37.3820, 126.6517], '28200': [37.4497, 126.7020], '28237': [37.5186, 126.7246],
    '28245': [37.5458, 126.7570], '28260': [37.5681, 126.6784], '28710': [37.6690, 126.4716],
    '28720': [37.2882, 126.2300],
    # 광주
    '29000': [35.1595, 126.8526], '29110': [35.1486, 126.9213], '29140': [35.1583, 126.8407],
    '29155': [35.1396, 126.8924], '29170': [35.1783, 126.9080], '29200': [35.1764, 126.8341],
    # 대전
    '30000': [36.3504, 127.3845], '30110': [36.3330, 127.4357], '30140': [36.3267, 127.4208],
    '30170': [36.3533, 127.3891], '30200': [36.3534, 127.3392], '30230': [36.3860, 127.4180],
    # 울산
    '31000': [35.5384, 129.3113], '31110': [35.5683, 129.3514], '31140': [35.5393, 129.3129],
    '31170': [35.5562, 129.3308], '31200': [35.5501, 129.3393], '31710': [35.6980, 129.1300],
    '31720': [35.4950, 129.2740],
    # 세종
    '36110': [36.4800, 127.2891],
    # 경기
    '41110': [37.2917, 127.0097], '41130': [37.3390, 127.1264], '41150': [37.2825, 127.1856],
    '41170': [37.4116, 127.2797], '41190': [37.4361, 127.1686], '41210': [37.5681, 127.0277],
    '41220': [37.4916, 127.0084], '41250': [37.6690, 126.7909], '41270': [37.7719, 126.7644],
    '41280': [37.8576, 127.1065], '41290': [37.9405, 127.1499], '41310': [37.7554, 127.3094],
    '41360': [37.4695, 127.0863], '41370': [37.3941, 127.0984], '41390': [37.3916, 126.9691],
    '41410': [37.3620, 126.8123], '41430': [37.3235, 126.7329], '41450': [37.2370, 126.8373],
    '41460': [37.1997, 127.0142], '41480': [37.1704, 127.2827], '41500': [37.0759, 127.5361],
    '41550': [37.5259, 126.7562], '41570': [37.5460, 126.7380], '41590': [37.6186, 126.9248],
    '41610': [37.8340, 127.0435], '41630': [37.8860, 127.3872], '41650': [37.7314, 127.2135],
    '41670': [37.7126, 127.0195], '41730': [37.6892, 127.3050], '41800': [37.2415, 127.5113],
    # 강원
    '42110': [37.8851, 127.7298], '42130': [37.7523, 128.8770], '42150': [37.5558, 128.8471],
    '42170': [37.7601, 128.4632], '42190': [37.8286, 128.6010], '42210': [37.8596, 127.8524],
    '42230': [37.8856, 127.7946], '42250': [37.6715, 128.3970], '42270': [37.5510, 128.5372],
    '42310': [37.6558, 127.9715], '42330': [38.2045, 128.5702], '42710': [37.7029, 127.9048],
    '42730': [37.4988, 128.0945], '42740': [37.5552, 127.8732], '42750': [37.2458, 128.0934],
    '42760': [37.3789, 127.9542], '42770': [38.2750, 128.4552], '42780': [38.0315, 128.0068],
    # 충북
    '43110': [36.6424, 127.4920], '43130': [36.7028, 127.4950], '43150': [36.8777, 127.8856],
    '43210': [37.1594, 128.2144], '43220': [36.8378, 127.4093], '43720': [36.6095, 127.7093],
    '43730': [36.5684, 128.1691], '43740': [36.8527, 127.7121], '43750': [36.4277, 127.7712],
    '43760': [36.2625, 128.0076], '43770': [36.8290, 128.0080],
    # 충남
    '44110': [36.8159, 127.1147], '44130': [36.7828, 127.2475], '44150': [36.7580, 127.3820],
    '44170': [36.8837, 127.2188], '44180': [36.8159, 126.9388], '44200': [36.6200, 126.7620],
    '44230': [36.8202, 126.8992], '44250': [36.3113, 126.8504], '44710': [36.6430, 126.4715],
    '44720': [36.4950, 126.6850], '44730': [36.3075, 126.9632], '44740': [36.5126, 126.8398],
    '44750': [36.2612, 127.2505], '44760': [36.4485, 126.9427], '44770': [36.2162, 127.1856],
    '44790': [36.6900, 127.2300],
    # 전북
    '45110': [35.8200, 127.1491], '45130': [35.9189, 126.9535], '45140': [35.9620, 126.7029],
    '45190': [35.6980, 126.9360], '45210': [35.9723, 126.7329], '45710': [35.4380, 126.9060],
    '45720': [35.7924, 126.8920], '45730': [35.8500, 127.2280], '45740': [35.7600, 127.1850],
    '45750': [35.7196, 127.3582], '45770': [35.5392, 127.3117], '45790': [35.4988, 127.2889],
    '45810': [35.8820, 127.5332], '45830': [35.9400, 127.2220],
    # 전남
    '46110': [34.8193, 126.3917], '46130': [34.7831, 126.3686], '46150': [34.8193, 126.4717],
    '46170': [34.8870, 126.9680], '46210': [34.9213, 126.4678], '46710': [34.8360, 126.8770],
    '46720': [34.7820, 126.9620], '46730': [34.7640, 127.0730], '46770': [34.5828, 126.9930],
    '46780': [34.5020, 127.0420], '46790': [34.7578, 127.5458], '46800': [34.8967, 127.6625],
    '46810': [35.0116, 127.2403], '46820': [35.1226, 127.3871], '46830': [35.1870, 126.8650],
    '46840': [34.7800, 126.6800], '46860': [34.6105, 126.4172], '46870': [34.2000, 126.2480],
    '46880': [34.3980, 126.4420], '46890': [34.5910, 126.5490], '46900': [34.7073, 126.4027],
    # 경북
    '47110': [36.0357, 129.3629], '47130': [35.8561, 128.7061], '47150': [36.5746, 128.5132],
    '47170': [36.1402, 128.4061], '47190': [36.0371, 129.2132], '47210': [35.8560, 128.8475],
    '47230': [35.9189, 129.3241], '47720': [36.3150, 128.7900], '47730': [36.4380, 128.8250],
    '47750': [36.4526, 129.1332], '47760': [36.2162, 129.3592], '47770': [36.4851, 129.1979],
    '47780': [36.0020, 128.5990], '47790': [36.0691, 128.5582], '47800': [35.8032, 128.6015],
    '47820': [36.2890, 129.2800], '47830': [36.4485, 129.3361], '47840': [35.5902, 128.2754],
    '47850': [36.7900, 128.7900], '47860': [36.9360, 129.2882], '47900': [37.1900, 129.1670],
    '47940': [36.3530, 128.3280],
    # 경남
    '48120': [35.2384, 128.6946], '48170': [35.1585, 128.5833], '48220': [35.1952, 128.6953],
    '48240': [35.2104, 128.6961], '48250': [35.2346, 128.8078], '48270': [35.1432, 128.8596],
    '48310': [35.3400, 128.4230], '48330': [35.0880, 128.4110], '48720': [35.5390, 128.3090],
    '48730': [35.4095, 128.0538], '48740': [35.5015, 127.9158], '48750': [35.5000, 127.8100],
    '48820': [35.0080, 128.4500], '48840': [35.1764, 128.5283], '48850': [35.0328, 128.5802],
    '48860': [35.3355, 128.3182], '48870': [35.5727, 128.1884], '48880': [35.5186, 127.8920],
    '48890': [35.5240, 128.7562],
    # 제주
    '50110': [33.4996, 126.5312], '50130': [33.2504, 126.5651],
}

# 4. 지도 시각화 함수 (장소 이름 입력 기반) - 버그 수정 버전
def visualize_crime_hotspots_detailed(crime_points_df, user_location_name):
    geolocator = Nominatim(user_agent="crime_map_app")
    user_location = None
    try:
        user_location = geolocator.geocode(user_location_name, timeout=10)
    except (GeocoderTimedOut, GeocoderServiceError) as e:
        print(f"지오코딩 서비스 오류가 발생했습니다: {e}")

    if user_location:
        user_lat, user_lon = user_location.latitude, user_location.longitude
        print(f"'{user_location_name}' 위치를 중심으로 지도를 생성합니다. (좌표: {user_lat}, {user_lon})")
    else:
        user_lat, user_lon = 37.5665, 126.9780
        print(f"'{user_location_name}'에 대한 좌표 정보를 찾을 수 없어 서울의 중심을 기본 위치로 설정합니다.")

    m = folium.Map(location=[user_lat, user_lon], zoom_start=13)
    folium.Marker(
        [user_lat, user_lon],
        tooltip=f"사용자 위치: {user_location_name}",
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(m)

    # 핫스팟 탐색 반경을 5km로 설정
    hotspot_radius_km = 4
    
    folium.Circle(
        radius=hotspot_radius_km * 1000,
        location=[user_lat, user_lon],
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.1
    ).add_to(m)

    hotspots_found = False

    # 모든 시군구에 대해 루프를 돌며, 반경 내에 있는 핫스팟만 표시
    for sgg_code, sgg_center in sgg_coords.items():
        sgg_lat, sgg_lon = sgg_center[0], sgg_center[1]

        # SGG 중심 좌표가 반경 내에 있는지 먼저 확인 (성능 최적화)
        distance_to_sgg_center = geodesic((user_lat, user_lon), (sgg_lat, sgg_lon)).km

        # 중심과의 거리가 반경+여유분(3km) 안에 있는 경우에만 상세 핫스팟 확인
        if distance_to_sgg_center <= hotspot_radius_km + 3:
            filtered_df = crime_points_df[crime_points_df['SGG_CD'].astype(str) == str(sgg_code)]

            if not filtered_df.empty:
                print(f"-> 시군구 '{sgg_code}'의 핫스팟을 확인합니다...")
                
                # GRAD 값에 따른 마커 크기 및 색상 동적 결정
                min_grad = filtered_df['GRAD'].min() if not filtered_df['GRAD'].isnull().all() else 0
                max_grad = filtered_df['GRAD'].max() if not filtered_df['GRAD'].isnull().all() else 11

                for _, row in filtered_df.iterrows():
                    grad = row['GRAD']

                    if max_grad > min_grad:
                        radius = 3 + (grad - min_grad) / (max_grad - min_grad) * 10
                    else:
                        radius = 5

                    r = min(255, int(255 * (grad / max_grad)))
                    g = max(0, int(255 - 255 * (grad / max_grad)))
                    b = 0
                    color = f'#{r:02x}{g:02x}{b:02x}'
                    
                    # 핫스팟이 겹쳐 보이지 않도록 중심 좌표를 기준으로 무작위로 위치 분산
                    offset_lat = sgg_lat + (random.random() - 0.5) * 0.015
                    offset_lon = sgg_lon + (random.random() - 0.5) * 0.015
                    
                    # ***수정된 로직: 마커가 실제로 표시될 좌표가 반경 내에 있는지 최종 확인***
                    hotspot_location = (offset_lat, offset_lon)
                    distance_to_hotspot = geodesic((user_lat, user_lon), hotspot_location).km

                    if distance_to_hotspot <= hotspot_radius_km:
                        # 반경 내에 있는 핫스팟만 마커로 추가
                        folium.CircleMarker(
                            location=[offset_lat, offset_lon],
                            radius=radius,
                            color=color,
                            fill=True,
                            fill_color=color,
                            fill_opacity=0.7,
                            tooltip=f"위험 등급: {grad}"
                        ).add_to(m)
                        hotspots_found = True

    if not hotspots_found:
        print(f"\n입력하신 장소 주변 {hotspot_radius_km}km 반경 내에 해당하는 범죄 핫스팟 데이터가 없습니다.")
    else:
        print(f"\n총 {hotspot_radius_km}km 반경 내의 핫스팟들을 지도에 표시했습니다.")

    output_filename = 'crime_hotzone_map_detailed.html'
    m.save(output_filename)
    print(f"\n지도가 '{output_filename}' 파일로 저장되었습니다. 웹 브라우저에서 이 파일을 열어보세요.")
    
    return m

# 5. 사용자 입력 및 실행
if __name__ == '__main__':
    if df_by_place is not None and df_by_region is not None and df_crime_points is not None:
        user_input_location = input("상세 핫스팟을 확인할 중심 위치를 입력하세요 (예: 용인시 처인구, 서울 강남구): ")
        visualize_crime_hotspots_detailed(df_crime_points, user_input_location)
    else:
        print("데이터 로딩 실패로 지도를 생성할 수 없습니다. 위 오류 메시지를 확인하세요.")